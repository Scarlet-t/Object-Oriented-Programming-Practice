Name: Jenny Zhang
Email: jzhang503@myseneca.ca
ID: 142467232
Date of Completion: 2024/04/04

I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
---------------------------------------------------------------------------------
PROMPT:

Learnings: What new concepts or skills did you acquire during this project? How did your understanding of C evolve into C++, especially in terms of object orientation?
--------------------------------------------------

The project helped me reflect on all concepts of object oriented programming. It served more to improve my preexisting understanding of the concepts rather than to teach me new ones, which it did well. It was especially helpful in teaching me how to work with the newer concepts in practice. Items like derived classes and virtual functions were very present in this project, or at least more noticeable due to their newness, compared to something like dynamic memory allocation - the use of which has almost become intuitive for me. Using derived classes definitely helped me better understand and appreciate inheritance - a concept I appreciate for the increased sense of organisation it provides (given that it allows me to heuristically sort my objects by hierarchies). My understanding of polymorphism has increased too. Previously, overloaded functions was my entry to understanding polymorphism; virtual functions are similar, except they involve the concept of inheritance too (at least here), as virtual functions are used in parent classes so that they can be overridden by the same functions in child classes. I note these two processes as I think that the project significantly improved my skill in using them. It helped me brush up on Encapsulation too, with the use of classes, constructors, member operators etc. those these aren't very notable as I've been working with them for a while, but it's good practice. 

C is procedural, not object oriented, so these were completely foreign to me. My understanding of C formed the basis for the algorithmic problem solving that aided me in coding, but through C++ this expanded as I began to incorporate concepts of object oriented programming in my coding. C had structs and functions that operated separately, C++ allowed for the encapsulation of functions/methods within classes such that the complex workings of the procedures are abstracted. This has made handling memory significantly easier, especially given the automatic calling of the constructor and destructors in which I often implement memory allocation and deallocation. There is little abstraction in C, I often end up with memory leaks as I lose track of where dynamic memory was allocated or forget to pair it with free(). This also makes me less likely to alter data where I'm not supposed to, as methods and member values can be made private to the class. Being able to use hierarchal relationships between classes is also new. C did not support inheritance, and it made the process of programming tedious and messy. In C++, inheritance made my data structures more organised - the two classes derived from Patient were straightforward to code as I had an idea of what purpose each member function served. And they were easy to call upon due to the polymorphism in C++. Read() with respect to TriagePatient, ContagionTestPatient(), and Patient() are 3 different methods that are called depending on the class of the object that read() is applied to. In C, read() would have to be 3 different functions with 3 different names, messying my code. 

My understanding of C formed a basis for my understanding of these concepts, especially in the algorithmic thinking it taught me. C++ introduced me to object oriented programming, and the concepts involved in OOP has helped me evolve in being able to write more maintainable, legible, and scalable code. 

-------------------------------------------------------------------
PROMPT:

Challenges: What were the most significant challenges you encountered while developing the application? How did you overcome these challenges, and what strategies did you employ? Feel free to share any insights, lessons learned, or personal growth you experienced throughout the project. Your reflections will provide valuable feedback and contribute to your overall learning journey.
--------------------------------------------------

The most significant challenge was debugging - which I think will be a common response as this process is rather tedious. A notable instance was a bug in MS3 that required 2 days of work to fix. This was the read function for Patient and it was rewritten 2 times. My first strategy was to use the debugger tools in Visual Studio, step into and step over, mostly. It helped me identify exactly which areas of the code had issues. I would then look at the lines of code involved, and see if something wrong occurred - logically or syntactically. Oftentimes I would look to my notes or sometimes w3schools for help, to ensure I'm using things correctly. For example, I had to look up if getLine reads the delimiter into the destination, or if that has to be cleared (it doesn't read the delimiter into the destination by the way). It's these misunderstandings of functions that caused a few problem areas, but that wasn't enough. Sometimes I would decide that a chunk of code is not worth saving - it was too messy or the debugging process has messed up the logic. It is at these points that I delete the whole thing, then rewrite my code, adding comments to keep myself on track. In the end, a lot of these bugs are caused by carelessness during the initial coding. I made sure to be extra careful with coding MS4 and MS5 thus had no significant bugs with them. This experience taught me to be careful, ensure my full attention is on the code as I type it, and know exactly what each item I type does and how it contributes to the program. Furthermore, it's helped me improve my debugging process and better understand how to use Visual Studio's built-in debugger. I also eventually learned that there was no shame in looking through notes if I'm unsure about something - this isn't cheating, in fact, it helps me learn more about the topics involved.